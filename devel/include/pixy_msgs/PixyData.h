// Generated by gencpp from file pixy_msgs/PixyData.msg
// DO NOT EDIT!


#ifndef PIXY_MSGS_MESSAGE_PIXYDATA_H
#define PIXY_MSGS_MESSAGE_PIXYDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pixy_msgs/PixyBlock.h>

namespace pixy_msgs
{
template <class ContainerAllocator>
struct PixyData_
{
  typedef PixyData_<ContainerAllocator> Type;

  PixyData_()
    : header()
    , blocks()  {
    }
  PixyData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , blocks(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::pixy_msgs::PixyBlock_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pixy_msgs::PixyBlock_<ContainerAllocator> >::other >  _blocks_type;
  _blocks_type blocks;





  typedef boost::shared_ptr< ::pixy_msgs::PixyData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pixy_msgs::PixyData_<ContainerAllocator> const> ConstPtr;

}; // struct PixyData_

typedef ::pixy_msgs::PixyData_<std::allocator<void> > PixyData;

typedef boost::shared_ptr< ::pixy_msgs::PixyData > PixyDataPtr;
typedef boost::shared_ptr< ::pixy_msgs::PixyData const> PixyDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pixy_msgs::PixyData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pixy_msgs::PixyData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pixy_msgs::PixyData_<ContainerAllocator1> & lhs, const ::pixy_msgs::PixyData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.blocks == rhs.blocks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pixy_msgs::PixyData_<ContainerAllocator1> & lhs, const ::pixy_msgs::PixyData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pixy_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pixy_msgs::PixyData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pixy_msgs::PixyData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pixy_msgs::PixyData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pixy_msgs::PixyData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pixy_msgs::PixyData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pixy_msgs::PixyData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pixy_msgs::PixyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef2e0586b5303fe53a804dd89384f7c8";
  }

  static const char* value(const ::pixy_msgs::PixyData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef2e0586b5303fe5ULL;
  static const uint64_t static_value2 = 0x3a804dd89384f7c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::pixy_msgs::PixyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pixy_msgs/PixyData";
  }

  static const char* value(const ::pixy_msgs::PixyData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pixy_msgs::PixyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"PixyBlock[] blocks\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: pixy_msgs/PixyBlock\n"
"# signiture types\n"
"uint16 NORMAL_SIGNITURE=0\n"
"uint16 COLOR_CODE=1\n"
"\n"
"# the message.  if type==0, then angle should be ignored.\n"
"uint16 type\n"
"uint16 signature\n"
"sensor_msgs/RegionOfInterest roi\n"
"float32 angle # in radians\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
;
  }

  static const char* value(const ::pixy_msgs::PixyData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pixy_msgs::PixyData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.blocks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixyData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pixy_msgs::PixyData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pixy_msgs::PixyData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "blocks[]" << std::endl;
    for (size_t i = 0; i < v.blocks.size(); ++i)
    {
      s << indent << "  blocks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pixy_msgs::PixyBlock_<ContainerAllocator> >::stream(s, indent + "    ", v.blocks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIXY_MSGS_MESSAGE_PIXYDATA_H
